// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "keeper/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, jwtToken, data
func (_m *Service) Add(ctx context.Context, jwtToken string, data model.DataBlock) error {
	ret := _m.Called(ctx, jwtToken, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.DataBlock) error); ok {
		r0 = rf(ctx, jwtToken, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Auth provides a mock function with given fields: ctx, login, password
func (_m *Service) Auth(ctx context.Context, login string, password string) (string, error) {
	ret := _m.Called(ctx, login, password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Change provides a mock function with given fields: ctx, jwtToken, data
func (_m *Service) Change(ctx context.Context, jwtToken string, data model.DataBlock) error {
	ret := _m.Called(ctx, jwtToken, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.DataBlock) error); ok {
		r0 = rf(ctx, jwtToken, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, jwtToken, dataKeyWord
func (_m *Service) Delete(ctx context.Context, jwtToken string, dataKeyWord string) error {
	ret := _m.Called(ctx, jwtToken, dataKeyWord)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, jwtToken, dataKeyWord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, jwtToken, dataKeyWord
func (_m *Service) Get(ctx context.Context, jwtToken string, dataKeyWord string) ([]model.DataBlock, error) {
	ret := _m.Called(ctx, jwtToken, dataKeyWord)

	var r0 []model.DataBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]model.DataBlock, error)); ok {
		return rf(ctx, jwtToken, dataKeyWord)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []model.DataBlock); ok {
		r0 = rf(ctx, jwtToken, dataKeyWord)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DataBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, jwtToken, dataKeyWord)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, login, password
func (_m *Service) Register(ctx context.Context, login string, password string) (string, error) {
	ret := _m.Called(ctx, login, password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
